{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Header.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","item","className","alt","src","id","name","email","CardList","robots","map","robot","key","Header","Component","Scroll","children","style","overflowY","border","height","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","hasError","info","this","setState","props","React","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","a","axios","get","data","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.33596d64.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({ item }) => (\n  <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n    <img alt='robot profile' src={`https://robohash.org/${item.id}?200x200`} />\n    <div>\n      <h2>{item.name}</h2>\n      <p>{item.email}</p>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((robot) => (\n        <Card key={robot.id} item={robot} />\n      ))}\n    </div>\n  );\n};\nexport default CardList;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    return (\n      <>\n        <h1 className='f1'>RoboFriends</h1>\n      </>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Scroll = ({ children }) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '750px',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search robots...'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nclass ErrorBoundry extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops, that is not goood</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport './App.css';\nimport CardList from '../components/CardList';\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots } from '../actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return isPending ? (\n      <h1 className='tc'>Loading...</h1>\n    ) : (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ searchRobots, requestRobots }) => ({\n  searchField: searchRobots.searchField,\n  robots: requestRobots.robots,\n  isPending: requestRobots.isPending,\n  error: requestRobots.error,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import axios from 'axios';\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => async (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING,\n  });\n\n  try {\n    const { data } = await axios.get(\n      'https://jsonplaceholder.typicode.com/users'\n    );\n    dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error,\n    });\n  }\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  error: '',\n  isPending: false,\n};\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots,\n});\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}